{
    "docs": [
        {
            "location": "/",
            "text": "Content Blockchain Improvement Proposals\n\u00b6\n\n\nThis document is governed by the \n2/COSS\n (COSS).\n\n\n\n\n\n\n\n\nID\n\n\nTitle\n\n\nType\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nCIP-0001\n\n\nWallet Address Aliases\n\n\nStream\n\n\n\n\n\n\n\n\nCIP-0002\n\n\nContent Timestamping\n\n\nStream\n\n\n\n\n\n\n\n\nCIP-0003\n\n\nISCC Registration\n\n\nStream\n\n\n\n\n\n\n\n\nCIP-0004\n\n\nSmart Licenses\n\n\nStream",
            "title": "Overview"
        },
        {
            "location": "/#content-blockchain-improvement-proposals",
            "text": "This document is governed by the  2/COSS  (COSS).     ID  Title  Type  Status      CIP-0001  Wallet Address Aliases  Stream     CIP-0002  Content Timestamping  Stream     CIP-0003  ISCC Registration  Stream     CIP-0004  Smart Licenses  Stream",
            "title": "Content Blockchain Improvement Proposals"
        },
        {
            "location": "/cip-0001-alias/",
            "text": "Wallet Address Aliases\n\u00b6\n\n\n\n\n\n\n\n\nCIP:\n\n\n0001\n\n\n\n\n\n\n\n\n\n\nTitle:\n\n\nWallet Address Aliases\n\n\n\n\n\n\nAuthos:\n\n\nTP\n\n\n\n\n\n\nStatus:\n\n\n\n\n\n\n\n\nCreated:\n\n\n2017-10-31\n\n\n\n\n\n\nLicense:\n\n\nBSD-2-Clause\n\n\n\n\n\n\n\n\nPurpose\n\u00b6\n\n\nWallet addresses are hard to memorize. This document specifies an open alias\nstream  named \nalias\n that can be used to register one human readable unique\nalias per address.\n\n\nSchema\n\u00b6\n\n\nThe alias-stream is readable and writable by every blockchain participant. An \nalias is registered as stream key in the alias-stream without any data. The \nwallet address of the alias is derived from the stream-item-publisher who \nsigned the publishing transaction.\n\n\nUpdating\n\u00b6\n\n\nA previously registered alias for an address can only be updated by the \noriginal registrant. This is done by publishing a new available alias as key \nto the alias-stream signed by the same publishers address. Updating an alias \nreleases the old alias for registration by other wallet addresses.\n\n\nRe-Assigning\n\u00b6\n\n\nAn alias can be re-assigned to a new address after the autoritative owner has \nreleased the alias by registering another alias to his address.\n\n\nValidation\n\u00b6\n\n\nThe first occurence of an unregistered or previously released alias is to be \ntreated as the authoritative entry.\n\n\nA valid alias stream entry has to have:\n\n\n\n\nat least one confirmation\n\n\nexactly one publisher\n\n\nemtpy data-hex\n\n\na key that is a a valid alias\n\n\na key that is not already assigned to another publisher (Wallet-ID)\n\n\n\n\nA valid alias must match the following regex:\n\n\n^                  # beginning of string\n(?!_$)             # no only _\n(?![-.])           # no - or . at the beginning\n(?!.*[_.-]{2})     # no __ or _. or ._ or .. or -- inside\n[a-z0-9_.-]{3,30}  # allowed characters (between 3 and 30)\n(?<![.-])          # no - or . at the end\n$                  # end of string\n\n\n\n\n\nAll stream items that are not conforming to these rules must be ignored by the \nstream parsing application. If a publisher announces a new alias the old \nbecomes available to be re-assigned. Applications must be aware of the fact \nthat address-alias mappings may change over time.",
            "title": "CIP0001 - Wallet Address Aliases"
        },
        {
            "location": "/cip-0001-alias/#wallet-address-aliases",
            "text": "CIP:  0001      Title:  Wallet Address Aliases    Authos:  TP    Status:     Created:  2017-10-31    License:  BSD-2-Clause",
            "title": "Wallet Address Aliases"
        },
        {
            "location": "/cip-0001-alias/#purpose",
            "text": "Wallet addresses are hard to memorize. This document specifies an open alias\nstream  named  alias  that can be used to register one human readable unique\nalias per address.",
            "title": "Purpose"
        },
        {
            "location": "/cip-0001-alias/#schema",
            "text": "The alias-stream is readable and writable by every blockchain participant. An \nalias is registered as stream key in the alias-stream without any data. The \nwallet address of the alias is derived from the stream-item-publisher who \nsigned the publishing transaction.",
            "title": "Schema"
        },
        {
            "location": "/cip-0001-alias/#updating",
            "text": "A previously registered alias for an address can only be updated by the \noriginal registrant. This is done by publishing a new available alias as key \nto the alias-stream signed by the same publishers address. Updating an alias \nreleases the old alias for registration by other wallet addresses.",
            "title": "Updating"
        },
        {
            "location": "/cip-0001-alias/#re-assigning",
            "text": "An alias can be re-assigned to a new address after the autoritative owner has \nreleased the alias by registering another alias to his address.",
            "title": "Re-Assigning"
        },
        {
            "location": "/cip-0001-alias/#validation",
            "text": "The first occurence of an unregistered or previously released alias is to be \ntreated as the authoritative entry.  A valid alias stream entry has to have:   at least one confirmation  exactly one publisher  emtpy data-hex  a key that is a a valid alias  a key that is not already assigned to another publisher (Wallet-ID)   A valid alias must match the following regex:  ^                  # beginning of string\n(?!_$)             # no only _\n(?![-.])           # no - or . at the beginning\n(?!.*[_.-]{2})     # no __ or _. or ._ or .. or -- inside\n[a-z0-9_.-]{3,30}  # allowed characters (between 3 and 30)\n(?<![.-])          # no - or . at the end\n$                  # end of string  All stream items that are not conforming to these rules must be ignored by the \nstream parsing application. If a publisher announces a new alias the old \nbecomes available to be re-assigned. Applications must be aware of the fact \nthat address-alias mappings may change over time.",
            "title": "Validation"
        },
        {
            "location": "/cip-0002-timestamp/",
            "text": "Content Timestamping\n\u00b6\n\n\n\n\n\n\n\n\nCIP:\n\n\n0002\n\n\n\n\n\n\n\n\n\n\nTitle:\n\n\nContent Timestamping\n\n\n\n\n\n\nAuthos:\n\n\nTP\n\n\n\n\n\n\nStatus:\n\n\n\n\n\n\n\n\nCreated:\n\n\n2017-11-09\n\n\n\n\n\n\nLicense:\n\n\nBSD-2-Clause\n\n\n\n\n\n\n\n\nPurpose\n\u00b6\n\n\nContent Timestamping is used to record a digital fingerprint of a document on \ndecentralized and tamper-proof blockchain. The timestamp serves as a secure \nproof of the time at which that document existed. It also secures the\nintegrity of the timestamped data without publicly revealing the content\nitself. Additionaly publisher of a timespamping transaction can prove control\nover the address that signed the transaction. This document speciefies an\nopen timestamping stream named \ntimestamp\n that can be used to publish\ndocument or file hashes as proof of existence.\n\n\nSchema\n\u00b6\n\n\nThe timestamp-stream is readable and writable by every blockchain participant.\nThe timestamp key must be published as a hex encoded sha256 hash of the data\nto be timestamped. The \ndata_hex\n value is optional.\n\n\nIf \ndata_hex\n is included it must be a \nUBJSON\n-encoded\ndata-mapping. Currently the only officially recognized key in that \ndatamapping is \ncomment\n which can be any comment about the timestamped \ndocument like document name, version or reason for timestamping. \nThe maximum processed length of \ncomment\n is 280 characters.",
            "title": "CIP0002 - Content Timestamping"
        },
        {
            "location": "/cip-0002-timestamp/#content-timestamping",
            "text": "CIP:  0002      Title:  Content Timestamping    Authos:  TP    Status:     Created:  2017-11-09    License:  BSD-2-Clause",
            "title": "Content Timestamping"
        },
        {
            "location": "/cip-0002-timestamp/#purpose",
            "text": "Content Timestamping is used to record a digital fingerprint of a document on \ndecentralized and tamper-proof blockchain. The timestamp serves as a secure \nproof of the time at which that document existed. It also secures the\nintegrity of the timestamped data without publicly revealing the content\nitself. Additionaly publisher of a timespamping transaction can prove control\nover the address that signed the transaction. This document speciefies an\nopen timestamping stream named  timestamp  that can be used to publish\ndocument or file hashes as proof of existence.",
            "title": "Purpose"
        },
        {
            "location": "/cip-0002-timestamp/#schema",
            "text": "The timestamp-stream is readable and writable by every blockchain participant.\nThe timestamp key must be published as a hex encoded sha256 hash of the data\nto be timestamped. The  data_hex  value is optional.  If  data_hex  is included it must be a  UBJSON -encoded\ndata-mapping. Currently the only officially recognized key in that \ndatamapping is  comment  which can be any comment about the timestamped \ndocument like document name, version or reason for timestamping. \nThe maximum processed length of  comment  is 280 characters.",
            "title": "Schema"
        },
        {
            "location": "/cip-0003-iscc/",
            "text": "ISCC Registration\n\u00b6\n\n\n\n\n\n\n\n\nCIP:\n\n\n0003\n\n\n\n\n\n\n\n\n\n\nTitle:\n\n\nISCC Registration\n\n\n\n\n\n\nAuthos:\n\n\nTP\n\n\n\n\n\n\nStatus:\n\n\n\n\n\n\n\n\nCreated:\n\n\n2018-01-13\n\n\n\n\n\n\nLicense:\n\n\nBSD-2-Clause\n\n\n\n\n\n\n\n\nPurpose\n\u00b6\n\n\nAn open an public registry for \nISCC\n content identifiers. \nThis documents specifies an open stream named \niscc\n that can be used to \nregister ISCC content codes and optionally associated metadata.\n\n\nSchema\n\u00b6\n\n\nThe ISCC-stream is named \niscc\n and is readable and writable by every \nblockchain participant. The stream uses multiple keys for each stream-item \nwhere each key represents one of the 4 ISCC components:\n\nMeta-ID\n, \nContent-ID\n, \nData-ID\n, \nInstance-ID\n.\n\n\nThe stream-item value must be a JSON object that supports a set of defined \ntop-level fields which are specified below. Applications \nmay\n add custom \nfields at the top level but \nmust\n prefix those fields with an underscore to \navoid collisions with future extensions of the \n\nISCC Metadata specification\n. \n\n\nTop-Level Fields\n\u00b6\n\n\nversion (optional)\n\u00b6\n\n\nVersion of ISCC registry schema. Assumed to be 1.0 if omitted.\n\n\ntitle (required)\n\u00b6\n\n\nTitle of an intangible creation.\n\n\nThe UTF-8 encoded value of the \ntitle\n-field must not exceed 128 bytes. For a \nvalid \nISCC\n entry the value of this field together with the optional \n\nextra\n-field must encode to the MetaID that was given as the first key of the \nstream-item.\n\n\nextra (optional)\n\u00b6\n\n\nA short statement that distinguishes this intangible creation from another one. \n\n\nThe UTF-8 encoded value of the \nextra\n-field must not exceed 128 bytes.\n\n\ntophash\n (optional)\n\u00b6\n\n\nThe full 64 character hex-encoded \ntophash\n (merkle root) retuned by the \ninstance_id function.\n\n\nmeta (optional)\n\u00b6\n\n\nA list of one or more metadata entries. Must include at least one entry if \nspecified. \n\n\nA metadata entry allows for a flexible and extendable way to supply additional \nindustry specific metadata about the identified content. It is a JSON object \nwith the fields \nschema\n, \nmediatype\n, \ndata\n, \nurl\n. The \nschema\n-field may \nindicate a well known metadata schema (such as Dublin Core, IPTC, ID3v2, ONIX) \nthat is used. The \nmediatype\n-field specifies an \n\nIANA Media Type\n. \nThe \ndata\n-field is only required if the\nurl\n field is omitted. It holds the \nmetadata conforming to the indicated \nschema\n and \nmediatype.\n The \nurl\n-field \nis only required if the \ndata\n-field is omitted. The \nurl\n is an external link \nthat is expected to host the metadata with the indicated \nschema\n and \n\nmediatype\n.  \n\n\nExamples\n\u00b6\n\n\nMinimal \nISCC\n registry entry value:\n\n\n{\n\n  \n\"title\"\n:\n \n\"The Neverending Story\"\n\n\n}\n\n\n\n\n\nWith extra field:\n\n\n{\n\n  \n\"title\"\n:\n \n\"The Neverending Story\"\n,\n\n  \n\"extra\"\n:\n \n\"1984 fantasy film based on novel\"\n\n\n}\n\n\n\n\n\nWith \nISCC\n data integrity hash:\n\n\n{\n\n  \n\"title\"\n:\n \n\"The Neverending Story\"\n,\n\n  \n\"tophash\"\n:\n \n\"40aeb0ef856a8dbfa4e9897de98b1a1eef7e24f8744e65cd33118b40d9741147\"\n\n\n}\n\n\n\nWith linked Metadata:\n\n\n{\n\n  \n\"title\"\n:\n \n\"Ubu: A face-to-face connector app for Hubud members\"\n,\n\n  \n\"meta\"\n:\n \n  \n[\n\n    \n{\n\n      \n\"schema\"\n:\n \n\"xmp\"\n,\n\n      \n\"mediatype\"\n:\n \n\"application/rdf+xml\"\n,\n\n      \n\"url\"\n:\n \n\"http://camwebb.info/blog/2014-11-19/ubu.xmp\"\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\n\nWith custom inline Metadata:\n\n\n{\n\n  \n\"title\"\n:\n \n\"The Neverending Story\"\n,\n\n  \n\"meta\"\n:\n \n  \n[{\n\n    \n\"schema\"\n:\n \n\"schema.org\"\n,\n\n    \n\"mediatype\"\n:\n \n\"application/ld+json\"\n,\n\n    \n\"data\"\n:\n \n      \n{\n\n        \n\"@context\"\n:\n \n\"http://schema.org\"\n,\n\n        \n\"@type\"\n:\n \n\"Movie\"\n,\n\n        \n\"name\"\n:\n \n\"The Neverending Story\"\n,\n\n        \n\"dateCreated\"\n:\n \n\"6 April, 1984\"\n,\n\n        \n\"director\"\n:\n \n\"Wolfgang Petersen\"\n,\n\n        \n\"actors\"\n:\n \n[\n\"Noah Hathaway\"\n,\n \n\"Barret Oliver\"\n,\n \n\"Tami Stronach\"\n],\n\n        \n\"duration\"\n:\n \n\"1:42:00\"\n\n      \n}\n\n  \n}]\n\n\n}\n\n\n\n\n\nWith application specific custom field:\n\n\n{\n\n  \n\"title\"\n:\n \n\"The Neverending Story\"\n,\n\n  \n\"_productionCompany\"\n:\n \n\"Bavaria Studios\"\n\n\n}",
            "title": "CIP0003 - ISCC Registration"
        },
        {
            "location": "/cip-0003-iscc/#iscc-registration",
            "text": "CIP:  0003      Title:  ISCC Registration    Authos:  TP    Status:     Created:  2018-01-13    License:  BSD-2-Clause",
            "title": "ISCC Registration"
        },
        {
            "location": "/cip-0003-iscc/#purpose",
            "text": "An open an public registry for  ISCC  content identifiers. \nThis documents specifies an open stream named  iscc  that can be used to \nregister ISCC content codes and optionally associated metadata.",
            "title": "Purpose"
        },
        {
            "location": "/cip-0003-iscc/#schema",
            "text": "The ISCC-stream is named  iscc  and is readable and writable by every \nblockchain participant. The stream uses multiple keys for each stream-item \nwhere each key represents one of the 4 ISCC components: Meta-ID ,  Content-ID ,  Data-ID ,  Instance-ID .  The stream-item value must be a JSON object that supports a set of defined \ntop-level fields which are specified below. Applications  may  add custom \nfields at the top level but  must  prefix those fields with an underscore to \navoid collisions with future extensions of the  ISCC Metadata specification .",
            "title": "Schema"
        },
        {
            "location": "/cip-0003-iscc/#top-level-fields",
            "text": "",
            "title": "Top-Level Fields"
        },
        {
            "location": "/cip-0003-iscc/#version-optional",
            "text": "Version of ISCC registry schema. Assumed to be 1.0 if omitted.",
            "title": "version (optional)"
        },
        {
            "location": "/cip-0003-iscc/#title-required",
            "text": "Title of an intangible creation.  The UTF-8 encoded value of the  title -field must not exceed 128 bytes. For a \nvalid  ISCC  entry the value of this field together with the optional  extra -field must encode to the MetaID that was given as the first key of the \nstream-item.",
            "title": "title (required)"
        },
        {
            "location": "/cip-0003-iscc/#extra-optional",
            "text": "A short statement that distinguishes this intangible creation from another one.   The UTF-8 encoded value of the  extra -field must not exceed 128 bytes.",
            "title": "extra (optional)"
        },
        {
            "location": "/cip-0003-iscc/#tophash-optional",
            "text": "The full 64 character hex-encoded  tophash  (merkle root) retuned by the \ninstance_id function.",
            "title": "tophash (optional)"
        },
        {
            "location": "/cip-0003-iscc/#meta-optional",
            "text": "A list of one or more metadata entries. Must include at least one entry if \nspecified.   A metadata entry allows for a flexible and extendable way to supply additional \nindustry specific metadata about the identified content. It is a JSON object \nwith the fields  schema ,  mediatype ,  data ,  url . The  schema -field may \nindicate a well known metadata schema (such as Dublin Core, IPTC, ID3v2, ONIX) \nthat is used. The  mediatype -field specifies an  IANA Media Type . \nThe  data -field is only required if the url  field is omitted. It holds the \nmetadata conforming to the indicated  schema  and  mediatype.  The  url -field \nis only required if the  data -field is omitted. The  url  is an external link \nthat is expected to host the metadata with the indicated  schema  and  mediatype .",
            "title": "meta (optional)"
        },
        {
            "location": "/cip-0003-iscc/#examples",
            "text": "Minimal  ISCC  registry entry value:  { \n   \"title\" :   \"The Neverending Story\"  }   With extra field:  { \n   \"title\" :   \"The Neverending Story\" , \n   \"extra\" :   \"1984 fantasy film based on novel\"  }   With  ISCC  data integrity hash:  { \n   \"title\" :   \"The Neverending Story\" , \n   \"tophash\" :   \"40aeb0ef856a8dbfa4e9897de98b1a1eef7e24f8744e65cd33118b40d9741147\"  }  \nWith linked Metadata:  { \n   \"title\" :   \"Ubu: A face-to-face connector app for Hubud members\" , \n   \"meta\" :  \n   [ \n     { \n       \"schema\" :   \"xmp\" , \n       \"mediatype\" :   \"application/rdf+xml\" , \n       \"url\" :   \"http://camwebb.info/blog/2014-11-19/ubu.xmp\" \n     } \n   ]  }   With custom inline Metadata:  { \n   \"title\" :   \"The Neverending Story\" , \n   \"meta\" :  \n   [{ \n     \"schema\" :   \"schema.org\" , \n     \"mediatype\" :   \"application/ld+json\" , \n     \"data\" :  \n       { \n         \"@context\" :   \"http://schema.org\" , \n         \"@type\" :   \"Movie\" , \n         \"name\" :   \"The Neverending Story\" , \n         \"dateCreated\" :   \"6 April, 1984\" , \n         \"director\" :   \"Wolfgang Petersen\" , \n         \"actors\" :   [ \"Noah Hathaway\" ,   \"Barret Oliver\" ,   \"Tami Stronach\" ], \n         \"duration\" :   \"1:42:00\" \n       } \n   }]  }   With application specific custom field:  { \n   \"title\" :   \"The Neverending Story\" , \n   \"_productionCompany\" :   \"Bavaria Studios\"  }",
            "title": "Examples"
        },
        {
            "location": "/cip-0004-smartlicense/",
            "text": "Smart Licenses v.1.0.0\n\u00b6\n\n\n\n\n\n\n\n\nCIP:\n\n\n0004\n\n\n\n\n\n\n\n\n\n\nTitle:\n\n\nSmart Licenses\n\n\n\n\n\n\nAuthors:\n\n\nTill Kreutzer, Sebastian Posth, Titusz Pan\n\n\n\n\n\n\nStatus:\n\n\n\n\n\n\n\n\nCreated:\n\n\n2018-01-12\n\n\n\n\n\n\nLicense:\n\n\nCC0 - Public Domain Dedication\n\n\n\n\n\n\n\n\nAbstract\n\u00b6\n\n\nThis document specifies the \nSmart License\n framework together with its data-structures, data-streams, and transaction-models that are used to publish and verify machine readable licenses and contracting rules on the Content Blockchain.\n\n\nPurpose\n\u00b6\n\n\nAllow people and machines to find license information and easily purchase, own and prove ownership of content licenses. Allow content owners, resellers and distributors to offer, monetize and verify content licenses.\n\n\nDefinitions\n\u00b6\n\n\nGeneral Terms\n\u00b6\n\n\n\n\nContent Blockchain:\n\n\nTechnical system to enable rights owners like \ncreators\n or publishers to license content to users and to register the license transactions publicly and persistently on a blockchain technology.\n\n\nCreator:\n\n\nThe person who created the licensed material (e.g. a composer or an author).\n\n\nISCC:\n\n\nInternational Standard Content Code - a unique ID (content identifier) that defines the \nlicensed material\n as a machine-readable code.\n\n\nLicensee/You:\n\n\n\u201c\nLicensee\n\u201d or \u201c\nYou\n\u201d: the individual or entity exercising the rights under this smart license. \nYour\n has a corresponding meaning.\n\n\nLicensed Material:\n\n\nThe artistic or literary work, database, or other copyright protected material to which the licensor applied this smart license. The licensed material is identified by a unique \nISCC\n\n\nLicensor:\n\n\nThe individual(s) or entity(ies) granting rights under this license. The licensor can be the creator or another copyright owner (like e.g. a publisher).\n\n\nRights Module:\n\n\nA standardized section of the \nsmart license\n that describes a certain  kind of use. The licensor can choose from a number of rights modules to define the  scope of his/her \nsmart license\n. \n\n\nRights Profile:\n\n\nThe combination of \nrights modules\n the licensor chose for his smart license.\n\n\nSmart License:\n\n\nThe sum of rules that apply for the use of the licensed material.\n\n\nTerm:\n\n\nThe period of time the \nsmart license\n is valid for.\n\n\nTerritory:\n\n\nThe geographical scope of the smart license.\n\n\nWallet-ID:\n\n\nA random public identifier whose private key is only known by the person(s) that created the wallet id. A Smart License is issued to a Wallet ID \nwhich acts as a proxy for its owner(s). The wallet id together with its \nprivate key can be used to prove licence ownership.\n\n\n\n\nRights Modules\n\u00b6\n\n\n\n\nAdapt (AD):\n\n\nModify, alter or change the licensed material in any way (e.g. remixing, transforming, shortening, translating, synchronizing, combining with other material). Adaptations may also be shared.\n\n\nLend:\n\n\nThe temporary surrender of the licensed material to another person or entity without compensation. \n\n\nResale (RS):\n\n\nCopy the \nlicensed material\n in any medium or format (digital, analogue, tangible, intangible). Making available or distribute the material is not subject of \nreproduce\n but \nshare\n.\n\n\nShare (SH):\n\n\nMake the \nlicensed material\n accessible to third parties in digital form. Share means e.g. to publicly display, perform or present the material, to broadcast, stream or make it online available. In case these uses require copying the material the necessary \nreproductions\n are covered, too. \n\n\nDistribute:\n\n\n\u201c\nDistribute\n\u201d means to make physical reproductions of the \nlicensed material\n (like printing a text or burning a CD) and to convey the copies to third parties. The offer to convey copies is a distribution, too.\n\n\nRent:\n\n\n\u201c\nRent\n\u201d is the temporary surrender of the licensed material to another person or entity for compensation.\n\n\n\n\nRestrictions\n\u00b6\n\n\n\n\nNon-commercial (NC):\n\n\n\u201c\nNon-commercial\n\u201d means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this smart license, the \nresale\n of the \nlicensed material\n is non-commercial.\n\n\nNo Industrial Property Rights (NI):\n\n\nPatent and trademark rights are not licensed under this \nsmart license\n.\n\n\n\n\nObligations\n\u00b6\n\n\n\n\nAttribution (AT):\n\n\n\n\nYou have to pertain notices that are supplied with the \nlicensed material\n when you \nshare\n or \ndistribute\n it. Under this obligation you have to:\n\n\n\n\nRetain credits to the creator and/or the publisher;  \n\n\nRetain copyright notices;\n\n\nIf so stipulated by the licensor retain an URL or hyperlink to an online source of the licensed material\n\n\n\n\n\n\nFair Share:\n\n\nIf you sell your \nsmart license\n a part of your sales revenue will be shared with the licensor. The licensor will provide information about the share ratio and other details ...\n\n\nIndicate Adaptations (IA):\n\n\nIf you share an adapted version of the \nlicensed material\n you have to indicate that your \nadaptation\n bases on the \nlicensed material\n in a reasonable manner. You have to name the \ncreator\n, copyright owner and \nlicensor\n of the material according to the \nattribution\n obligation. If  you share \nadaptations\n you must not imply that they are authorised or otherwise endorsed by the \nlicensor\n.\n\n\n\n\nIntroduction\n\u00b6\n\n\nA \nSmart License\n is encoded as a JSON data structure that holds information about licensing conditions by a given licensor and for a given content. Applications can construct a human readable textual license contract based on Smart License data. A Smart Licence may constitute a public license offering \nwhen published to the Content Blockchain.\n\n\n\n\nTransaction Models\n\u00b6\n\n\nA \nTransaction Model\n describes a series of verifiable on-chain events that trigger the formation of a \nSmart License Contract\n between licensor(s) and licensee(s). They also describe the procedures to find, display and verify such contracts based on data available on the blockchain. We propose three basic \nTransaction Models\n:\n\n\n\n\nNote\n\n\nThe current idea is to allow multiple Transaction Models per Smart License. \nWe considering to only allow to set one Transaction Model per Smart License, \nbecause it might turn out to be tricky to verify contract formation/triggers \nwith an overly flexible model.\n\n\n\n\nChain Attestation\n\u00b6\n\n\nDictates that a license contract becomes effective between Licensor and Licensee when an on-chain attestation originating from the Walled-ID of the licensor has been confirmed on the blockchain. An on-chain attestation has to include references to a Smart License and the Wallet-ID of the licensee.\n\n\nA \nSmart License\n that specifies \nCHAIN_ATTESTATION\n as one of its allowable \nTransaction Models\n can be triggered by the publisher of the \nSmart License\n independent of a price or payment method. The \nLicensor\n does this by attesting to the license grant with an on-chain entry to the data-stream \nsmart-license\n. The stream-item is marked as an attestation by providing \nATT\n as the first stream-key. The corresponding Smart License is referenced by the second key, which must be a UUID4. The Licensee is referenced by Wallet-ID in the stream data  json field \nlicensee\n that may contain a single Walled-ID or an array of Walled-IDs. \n\n\n\n\nExample\n\n\nSTREAM-KEYS\n: [\"ATT\", \"dac9a2f5-8bfc-4f20-b665-42e1606812ac\"]\n\n\nSTREAM-DATA\n:  \n\n\n\u200b\n{\"json\":\n  {\"licensee\": \"2QTa5N4aeSrCB2MLoPdPF4AsTjstJgcLTnd\"}\n}\n\u200b\n\n\n\n\nChain Payment\n\u00b6\n\n\nDictates that a license contract becomes effective between Licensor and Licensee when an on-chain payment of amount \nprice x\n from the licensees Wallet-ID to \npayment_address y\n has been confirmed on the blockchain.\n\n\nA \nSmart License\n that specifies \nCHAIN_PAYMENT\n as one of its allowable \nTransaction Models\n must also specify a price in one or multiple on-chain currencies (native or token) that are accepted as a payment that triggers the verifiable formation of a \nSmart License Contract\n.\n\n\nChain Tokenization\n\u00b6\n\n\nA \nSmart License\n that specifies \nCHAIN_TOKENIZATION\n as one of its allowable \nTransaction Models\n must issue a token that securitizes the formation of a contract between the licensor and the token holder. This effectively means whoever holds such token is automatically a licensee of the Smart License that is bound to the token. The token MUST be issued with the same UUID4 as the Smart License itself but without hyphens. The smallest unit of the token MUST be \n1\n. The token MAY be open or closed (Limited Edition) for re-issue. The token issue transaction must contain the custom fields \ninfo\n and \ntype\n.  \ninfo\n should be a short  description about the Smart License. \ntype\n must be set to \nsmart-license\n.\n\n\nData Model\n\u00b6\n\n\nOverview\n\u00b6\n\n\n\n\nSmart License\n\u00b6\n\n\nA \nSmart License\n is published as a JSON object to the \nsmart-license\n stream on the Content Blockchain. The primary key for the stream-item is a self generated UUID4.\n\n\nThe \nISCC codes\n of the licensed materials SHOULD be used as secondary keys of the stream-item. \n\n\nBy default the \nWallet-ID\n of the transaction that publishes the stream-item (the stream-item publisher) is assumed to be the \nLicensor\n of the referenced content and also the recipient (payment address) of any on-chain payments that the Smart License defines as acceptable. Both assumptions MAY be overridden by the contents of the Smart License json object. \n\n\n\n\nNote\n\n\nFuture Smart License versions might allow for multisig stream-items. Until then multisig-stream items are to be treated as invalid by applications.\n\n\n\n\nAlternatively a Smart License may be published to privately controlled streams that are Smart License compatible. A list of Smart License compatible streams will be published and maintained by a community of elected users with write permissions to the closed \nsmart-license-streams\n stream.\n\n\nA Smart License supports the following JSON object fields:\n\n\nversion (optional)\n\u00b6\n\n\nVersion number of Smart License specification. Assumed to be 1 if the field is empty or omitted.\n\n\ntemplate (required)\n\u00b6\n\n\nSHA256 of the \nTemplate\n data that MUST be used to render the textual version of the  \nSmart License\n. The default template engine is \nJinja2 v. 2.10.\n\n\nExtensibility: applications MUST check for the optional field \ntemplate_engine\n to make sure that they use the appropriate template engine.  Templates MAY be published to the \nsmart-license-templates\n stream with the SHA256 hash as key and the value being a json object with the fields: \nname\n, \ndescription\n, \ntemplate_data\n, \ndefault_rights_modules\n.\n\n\ntemplate_engine (optional)\n\u00b6\n\n\nThe template engine used to render the human readable contract. If empty or omitted it is assumed to be Jinja2 v. 2.10.\n\n\nmaterials (optional)\n\u00b6\n\n\nThe licensed material(s) referenced by a list of one or multiple identifiers.\n\n\nIf this field is empty or omitted the licensed material(s) are assumed to be referenced by the secondary keys of the Smart License stream-item. The default identifier type is an ISCC.\n\n\nBy default and for reasons of discoverability (stream indexing) and storage space efficiency the licensed materials SHOULD only be referenced by secondary keys of the stream-item.\n\n\nThis field allows the \nSmart License\n data model to work as a message outside of the context of a Content Blockchain stream-item. If this field is used, the secondary stream-item keys must either be non-existent or an exact match of those secondary keys. Any other combination must be treated as invalid.\n\n\nmaterial_ident_type (optional)\n\u00b6\n\n\nThe type of identifier used to reference the licensed material. Assumed to be an ISCC if this field is empty or omitted.\n\n\nlicensor (optional)\n\u00b6\n\n\nIf this field is empty or omitted the Wallet-ID of the stream-item publisher is assumed to identify the Licensor. Else only this list of one or multiple Wallet-IDs are assumed to identify  the Licensors of the referenced materials.\n\n\nlicensor_ident_type (optional)\n\u00b6\n\n\nIf this field is empty or omitted an application MUST assume that the licensor is identified by a Content Blockchain Wallet-ID.\n\n\nrights_modules (optional)\n\u00b6\n\n\nList of Rights Modules (contract clauses) to be effective for and included in this Smart License. \n\n\nIf no Rights Modules are provided the referenced template will decide about the modules to be included by default. \n\n\n\n\nNote\n\n\nValidation logic and/or extended data that might be needed to assemble meaningful combinations of Rights Modules is to be defined in later iterations of this CIP.\n\n\n\n\ntransaction_models (optional)\n\u00b6\n\n\nThe Transaction Models supported and accepted by this Smart License.\n\n\nA set of one or more of the constants: \nCHAIN_ATTESTATION\n, \nCHAIN_PAYMENT\n, \nCHAIN_TOKENIZATION\n. If this field is empty or omitted the Smart License is purely informational and there is no defined way to close a license contract on-chain.\n\n\nprices (optional)\n\u00b6\n\n\nA list of prices (amount, currency) per license to be acquired in different currencies or cryptocurrencies. At least one price in an accepted on-chain currency/token must be given if the \ntransaction_models\n field contains the \nCHAIN_PAYMENT\n constant. In this case an on-chain payment to the \npayment_address\n that includes a reference to this Smart License (UUID4) and matches the specified price is to be interpreted as a verifiable formation of contract between the payee and the licensor.\n\n\npayment_addresses (optional)\n\u00b6\n\n\nThe Content Blockchain Wallet-ID to which the payment must be sent to acquire a license. If this field is empty or omitted the stream-item publishers Wallet-ID is assumed to be the \npayment_address\n. Only relevant with \nCHAIN_PAYMENT\n activated.\n\n\nduration (optional)\n\u00b6\n\n\nDuration of license effectiveness in seconds. If this field is empty, omitted or 0 the duration of the license is assumed to be unrestricted.\n\n\nstart_time (optional)\n\u00b6\n\n\nStart time of license effectiveness in seconds of UTC time since Unix epoch (1970-01-01T00:00:00Z). If this field is empty, omitted or 0 the start time of license is assumed to be the time of activation. Time of activation means transaction block time of a contract triggering chain payment, attestation or token transfer.\n\n\nterritories (optional)\n\u00b6\n\n\nA list of one or more ISO 3166-1 alpha-2 country codes where the licensed material can be used. If this field is empty or omitted it is assumed that no territorial restrictions apply.\n\n\naccess_url (optional)\n\u00b6\n\n\nAn url that can be used by the to retrieve the licensed material.\nThe access_url is expected to deliver a WebPage or Api service that is\nable support features like:\n\n\n\n\nauthenticate a user by his/her Wallet-ID.\n\n\nverify on the blockchain that the user has a valid license for the requested content.\n\n\ndeliver/stream the content to the user.\n\n\n\n\nUltimately the content delivery system behind the access url is application specific. \n\n\n\n\nNote\n\n\nFuture versions of this CIP might define a standard protocol for a content delivery system.\n\n\n\n\nGovernance\n\u00b6\n\n\nThe act of publishing a \nSmart License\n is implicitly also an \nunverified\n claim of ownership or re-licensing rights by the publishing entity for the respective content. The publishing entity can present cryptographic proof of being the source of a given \nSmart License\n on the blockchain and can also create a cryptographic Proof of Data Possession of the claimed content at the time of blockchain registration. It is important not to confuse this with a proof of authorship or intellectual property ownership of the referenced content (yes even blockchains can\u00b4t do that). This becomes less relevant In light of the fact, that the content itself is not stored on the blockchain and content access authorization is managed by blockchain-external applications that can define their own trust-rules. \n\n\nTo further protect intellectual property rights and prevent abuse the \nContent Blockchain\n offers various features:\n\n\n\n\nCurated data-streams to which only elected participants can publish \nSmart Licenses\n.\n\n\nPublisher accountability, by self sovereign or trusted third party certification.\n\n\nA community managed abuse stream.\n\n\nPossibility of reputational scoring based on chain history.",
            "title": "CIP0004 - Smart Licenses"
        },
        {
            "location": "/cip-0004-smartlicense/#smart-licenses-v100",
            "text": "CIP:  0004      Title:  Smart Licenses    Authors:  Till Kreutzer, Sebastian Posth, Titusz Pan    Status:     Created:  2018-01-12    License:  CC0 - Public Domain Dedication",
            "title": "Smart Licenses v.1.0.0"
        },
        {
            "location": "/cip-0004-smartlicense/#abstract",
            "text": "This document specifies the  Smart License  framework together with its data-structures, data-streams, and transaction-models that are used to publish and verify machine readable licenses and contracting rules on the Content Blockchain.",
            "title": "Abstract"
        },
        {
            "location": "/cip-0004-smartlicense/#purpose",
            "text": "Allow people and machines to find license information and easily purchase, own and prove ownership of content licenses. Allow content owners, resellers and distributors to offer, monetize and verify content licenses.",
            "title": "Purpose"
        },
        {
            "location": "/cip-0004-smartlicense/#definitions",
            "text": "",
            "title": "Definitions"
        },
        {
            "location": "/cip-0004-smartlicense/#general-terms",
            "text": "Content Blockchain:  Technical system to enable rights owners like  creators  or publishers to license content to users and to register the license transactions publicly and persistently on a blockchain technology.  Creator:  The person who created the licensed material (e.g. a composer or an author).  ISCC:  International Standard Content Code - a unique ID (content identifier) that defines the  licensed material  as a machine-readable code.  Licensee/You:  \u201c Licensee \u201d or \u201c You \u201d: the individual or entity exercising the rights under this smart license.  Your  has a corresponding meaning.  Licensed Material:  The artistic or literary work, database, or other copyright protected material to which the licensor applied this smart license. The licensed material is identified by a unique  ISCC  Licensor:  The individual(s) or entity(ies) granting rights under this license. The licensor can be the creator or another copyright owner (like e.g. a publisher).  Rights Module:  A standardized section of the  smart license  that describes a certain  kind of use. The licensor can choose from a number of rights modules to define the  scope of his/her  smart license .   Rights Profile:  The combination of  rights modules  the licensor chose for his smart license.  Smart License:  The sum of rules that apply for the use of the licensed material.  Term:  The period of time the  smart license  is valid for.  Territory:  The geographical scope of the smart license.  Wallet-ID:  A random public identifier whose private key is only known by the person(s) that created the wallet id. A Smart License is issued to a Wallet ID \nwhich acts as a proxy for its owner(s). The wallet id together with its \nprivate key can be used to prove licence ownership.",
            "title": "General Terms"
        },
        {
            "location": "/cip-0004-smartlicense/#rights-modules",
            "text": "Adapt (AD):  Modify, alter or change the licensed material in any way (e.g. remixing, transforming, shortening, translating, synchronizing, combining with other material). Adaptations may also be shared.  Lend:  The temporary surrender of the licensed material to another person or entity without compensation.   Resale (RS):  Copy the  licensed material  in any medium or format (digital, analogue, tangible, intangible). Making available or distribute the material is not subject of  reproduce  but  share .  Share (SH):  Make the  licensed material  accessible to third parties in digital form. Share means e.g. to publicly display, perform or present the material, to broadcast, stream or make it online available. In case these uses require copying the material the necessary  reproductions  are covered, too.   Distribute:  \u201c Distribute \u201d means to make physical reproductions of the  licensed material  (like printing a text or burning a CD) and to convey the copies to third parties. The offer to convey copies is a distribution, too.  Rent:  \u201c Rent \u201d is the temporary surrender of the licensed material to another person or entity for compensation.",
            "title": "Rights Modules"
        },
        {
            "location": "/cip-0004-smartlicense/#restrictions",
            "text": "Non-commercial (NC):  \u201c Non-commercial \u201d means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this smart license, the  resale  of the  licensed material  is non-commercial.  No Industrial Property Rights (NI):  Patent and trademark rights are not licensed under this  smart license .",
            "title": "Restrictions"
        },
        {
            "location": "/cip-0004-smartlicense/#obligations",
            "text": "Attribution (AT):   You have to pertain notices that are supplied with the  licensed material  when you  share  or  distribute  it. Under this obligation you have to:   Retain credits to the creator and/or the publisher;    Retain copyright notices;  If so stipulated by the licensor retain an URL or hyperlink to an online source of the licensed material    Fair Share:  If you sell your  smart license  a part of your sales revenue will be shared with the licensor. The licensor will provide information about the share ratio and other details ...  Indicate Adaptations (IA):  If you share an adapted version of the  licensed material  you have to indicate that your  adaptation  bases on the  licensed material  in a reasonable manner. You have to name the  creator , copyright owner and  licensor  of the material according to the  attribution  obligation. If  you share  adaptations  you must not imply that they are authorised or otherwise endorsed by the  licensor .",
            "title": "Obligations"
        },
        {
            "location": "/cip-0004-smartlicense/#introduction",
            "text": "A  Smart License  is encoded as a JSON data structure that holds information about licensing conditions by a given licensor and for a given content. Applications can construct a human readable textual license contract based on Smart License data. A Smart Licence may constitute a public license offering \nwhen published to the Content Blockchain.",
            "title": "Introduction"
        },
        {
            "location": "/cip-0004-smartlicense/#transaction-models",
            "text": "A  Transaction Model  describes a series of verifiable on-chain events that trigger the formation of a  Smart License Contract  between licensor(s) and licensee(s). They also describe the procedures to find, display and verify such contracts based on data available on the blockchain. We propose three basic  Transaction Models :   Note  The current idea is to allow multiple Transaction Models per Smart License. \nWe considering to only allow to set one Transaction Model per Smart License, \nbecause it might turn out to be tricky to verify contract formation/triggers \nwith an overly flexible model.",
            "title": "Transaction Models"
        },
        {
            "location": "/cip-0004-smartlicense/#chain-attestation",
            "text": "Dictates that a license contract becomes effective between Licensor and Licensee when an on-chain attestation originating from the Walled-ID of the licensor has been confirmed on the blockchain. An on-chain attestation has to include references to a Smart License and the Wallet-ID of the licensee.  A  Smart License  that specifies  CHAIN_ATTESTATION  as one of its allowable  Transaction Models  can be triggered by the publisher of the  Smart License  independent of a price or payment method. The  Licensor  does this by attesting to the license grant with an on-chain entry to the data-stream  smart-license . The stream-item is marked as an attestation by providing  ATT  as the first stream-key. The corresponding Smart License is referenced by the second key, which must be a UUID4. The Licensee is referenced by Wallet-ID in the stream data  json field  licensee  that may contain a single Walled-ID or an array of Walled-IDs.    Example  STREAM-KEYS : [\"ATT\", \"dac9a2f5-8bfc-4f20-b665-42e1606812ac\"]  STREAM-DATA :    \u200b {\"json\":\n  {\"licensee\": \"2QTa5N4aeSrCB2MLoPdPF4AsTjstJgcLTnd\"}\n}\n\u200b",
            "title": "Chain Attestation"
        },
        {
            "location": "/cip-0004-smartlicense/#chain-payment",
            "text": "Dictates that a license contract becomes effective between Licensor and Licensee when an on-chain payment of amount  price x  from the licensees Wallet-ID to  payment_address y  has been confirmed on the blockchain.  A  Smart License  that specifies  CHAIN_PAYMENT  as one of its allowable  Transaction Models  must also specify a price in one or multiple on-chain currencies (native or token) that are accepted as a payment that triggers the verifiable formation of a  Smart License Contract .",
            "title": "Chain Payment"
        },
        {
            "location": "/cip-0004-smartlicense/#chain-tokenization",
            "text": "A  Smart License  that specifies  CHAIN_TOKENIZATION  as one of its allowable  Transaction Models  must issue a token that securitizes the formation of a contract between the licensor and the token holder. This effectively means whoever holds such token is automatically a licensee of the Smart License that is bound to the token. The token MUST be issued with the same UUID4 as the Smart License itself but without hyphens. The smallest unit of the token MUST be  1 . The token MAY be open or closed (Limited Edition) for re-issue. The token issue transaction must contain the custom fields  info  and  type .   info  should be a short  description about the Smart License.  type  must be set to  smart-license .",
            "title": "Chain Tokenization"
        },
        {
            "location": "/cip-0004-smartlicense/#data-model",
            "text": "",
            "title": "Data Model"
        },
        {
            "location": "/cip-0004-smartlicense/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/cip-0004-smartlicense/#smart-license",
            "text": "A  Smart License  is published as a JSON object to the  smart-license  stream on the Content Blockchain. The primary key for the stream-item is a self generated UUID4.  The  ISCC codes  of the licensed materials SHOULD be used as secondary keys of the stream-item.   By default the  Wallet-ID  of the transaction that publishes the stream-item (the stream-item publisher) is assumed to be the  Licensor  of the referenced content and also the recipient (payment address) of any on-chain payments that the Smart License defines as acceptable. Both assumptions MAY be overridden by the contents of the Smart License json object.    Note  Future Smart License versions might allow for multisig stream-items. Until then multisig-stream items are to be treated as invalid by applications.   Alternatively a Smart License may be published to privately controlled streams that are Smart License compatible. A list of Smart License compatible streams will be published and maintained by a community of elected users with write permissions to the closed  smart-license-streams  stream.  A Smart License supports the following JSON object fields:",
            "title": "Smart License"
        },
        {
            "location": "/cip-0004-smartlicense/#version-optional",
            "text": "Version number of Smart License specification. Assumed to be 1 if the field is empty or omitted.",
            "title": "version (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#template-required",
            "text": "SHA256 of the  Template  data that MUST be used to render the textual version of the   Smart License . The default template engine is  Jinja2 v. 2.10.  Extensibility: applications MUST check for the optional field  template_engine  to make sure that they use the appropriate template engine.  Templates MAY be published to the  smart-license-templates  stream with the SHA256 hash as key and the value being a json object with the fields:  name ,  description ,  template_data ,  default_rights_modules .",
            "title": "template (required)"
        },
        {
            "location": "/cip-0004-smartlicense/#template_engine-optional",
            "text": "The template engine used to render the human readable contract. If empty or omitted it is assumed to be Jinja2 v. 2.10.",
            "title": "template_engine (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#materials-optional",
            "text": "The licensed material(s) referenced by a list of one or multiple identifiers.  If this field is empty or omitted the licensed material(s) are assumed to be referenced by the secondary keys of the Smart License stream-item. The default identifier type is an ISCC.  By default and for reasons of discoverability (stream indexing) and storage space efficiency the licensed materials SHOULD only be referenced by secondary keys of the stream-item.  This field allows the  Smart License  data model to work as a message outside of the context of a Content Blockchain stream-item. If this field is used, the secondary stream-item keys must either be non-existent or an exact match of those secondary keys. Any other combination must be treated as invalid.",
            "title": "materials (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#material_ident_type-optional",
            "text": "The type of identifier used to reference the licensed material. Assumed to be an ISCC if this field is empty or omitted.",
            "title": "material_ident_type (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#licensor-optional",
            "text": "If this field is empty or omitted the Wallet-ID of the stream-item publisher is assumed to identify the Licensor. Else only this list of one or multiple Wallet-IDs are assumed to identify  the Licensors of the referenced materials.",
            "title": "licensor (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#licensor_ident_type-optional",
            "text": "If this field is empty or omitted an application MUST assume that the licensor is identified by a Content Blockchain Wallet-ID.",
            "title": "licensor_ident_type (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#rights_modules-optional",
            "text": "List of Rights Modules (contract clauses) to be effective for and included in this Smart License.   If no Rights Modules are provided the referenced template will decide about the modules to be included by default.    Note  Validation logic and/or extended data that might be needed to assemble meaningful combinations of Rights Modules is to be defined in later iterations of this CIP.",
            "title": "rights_modules (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#transaction_models-optional",
            "text": "The Transaction Models supported and accepted by this Smart License.  A set of one or more of the constants:  CHAIN_ATTESTATION ,  CHAIN_PAYMENT ,  CHAIN_TOKENIZATION . If this field is empty or omitted the Smart License is purely informational and there is no defined way to close a license contract on-chain.",
            "title": "transaction_models (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#prices-optional",
            "text": "A list of prices (amount, currency) per license to be acquired in different currencies or cryptocurrencies. At least one price in an accepted on-chain currency/token must be given if the  transaction_models  field contains the  CHAIN_PAYMENT  constant. In this case an on-chain payment to the  payment_address  that includes a reference to this Smart License (UUID4) and matches the specified price is to be interpreted as a verifiable formation of contract between the payee and the licensor.",
            "title": "prices (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#payment_addresses-optional",
            "text": "The Content Blockchain Wallet-ID to which the payment must be sent to acquire a license. If this field is empty or omitted the stream-item publishers Wallet-ID is assumed to be the  payment_address . Only relevant with  CHAIN_PAYMENT  activated.",
            "title": "payment_addresses (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#duration-optional",
            "text": "Duration of license effectiveness in seconds. If this field is empty, omitted or 0 the duration of the license is assumed to be unrestricted.",
            "title": "duration (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#start_time-optional",
            "text": "Start time of license effectiveness in seconds of UTC time since Unix epoch (1970-01-01T00:00:00Z). If this field is empty, omitted or 0 the start time of license is assumed to be the time of activation. Time of activation means transaction block time of a contract triggering chain payment, attestation or token transfer.",
            "title": "start_time (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#territories-optional",
            "text": "A list of one or more ISO 3166-1 alpha-2 country codes where the licensed material can be used. If this field is empty or omitted it is assumed that no territorial restrictions apply.",
            "title": "territories (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#access_url-optional",
            "text": "An url that can be used by the to retrieve the licensed material.\nThe access_url is expected to deliver a WebPage or Api service that is\nable support features like:   authenticate a user by his/her Wallet-ID.  verify on the blockchain that the user has a valid license for the requested content.  deliver/stream the content to the user.   Ultimately the content delivery system behind the access url is application specific.    Note  Future versions of this CIP might define a standard protocol for a content delivery system.",
            "title": "access_url (optional)"
        },
        {
            "location": "/cip-0004-smartlicense/#governance",
            "text": "The act of publishing a  Smart License  is implicitly also an  unverified  claim of ownership or re-licensing rights by the publishing entity for the respective content. The publishing entity can present cryptographic proof of being the source of a given  Smart License  on the blockchain and can also create a cryptographic Proof of Data Possession of the claimed content at the time of blockchain registration. It is important not to confuse this with a proof of authorship or intellectual property ownership of the referenced content (yes even blockchains can\u00b4t do that). This becomes less relevant In light of the fact, that the content itself is not stored on the blockchain and content access authorization is managed by blockchain-external applications that can define their own trust-rules.   To further protect intellectual property rights and prevent abuse the  Content Blockchain  offers various features:   Curated data-streams to which only elected participants can publish  Smart Licenses .  Publisher accountability, by self sovereign or trusted third party certification.  A community managed abuse stream.  Possibility of reputational scoring based on chain history.",
            "title": "Governance"
        }
    ]
}